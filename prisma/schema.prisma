// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for members, coaches, administrators
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  role          UserRole  @default(MEMBER)
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  newsItems     News[]    @relation("author")
  eventsCreated Event[]   @relation("organizer")
  eventsJoined  Event[]   @relation("participants")
  results       Result[]
}

enum UserRole {
  ADMIN
  COACH
  MEMBER
  VISITOR
}

// Profile information for users
model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth DateTime?
  phoneNumber String?
  address     String?
  bio         String?
  avatarUrl   String?
  gender      String    @default("male")
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
}

// Categories/Teams
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  profiles    Profile[]
  events      Event[]
}

// Events (competitions, training sessions, etc.)
model Event {
  id           String    @id @default(uuid())
  title        String
  description  String?
  location     String
  startDate    DateTime
  endDate      DateTime?
  type         EventType
  organizerId  String
  organizer    User      @relation("organizer", fields: [organizerId], references: [id])
  participants User[]    @relation("participants")
  categoryId   String?
  category     Category? @relation(fields: [categoryId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  results      Result[]
}

enum EventType {
  COMPETITION
  TRAINING
  MEETING
  OTHER
}

// News and announcements
// Maybe we don't need it - Candidate for depracted
model News {
  id        String   @id @default(uuid())
  title     String
  content   String
  authorId  String
  author    User     @relation("author", fields: [authorId], references: [id])
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageUrl  String?
}

// Results and achievements
model Result {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  position  Int?
  score     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
