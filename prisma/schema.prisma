generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  role          UserRole @default(MEMBER)
  passwordHash  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  eventsCreated Event[]  @relation("organizer")
  newsItems     News[]   @relation("author")
  athlete       Athlete?
  results       Result[]
  eventsJoined  Event[]  @relation("participants")
}

model Athlete {
  id          String    @id @default(uuid())
  userId      String?   @unique
  name        String
  dateOfBirth DateTime?
  phoneNumber String?
  address     String?
  bio         String?
  avatarUrl   String?
  categoryId  String?
  gender      String    @default("male")
  openTrackId String?   @unique
  category    Category? @relation(fields: [categoryId], references: [id])
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(uuid()) @map("id")
  name        String    @unique @map("name")
  description String    @map("description")
  minAge      Int       @map("min_age")
  maxAge      Int?      @map("max_age")
  athletes    Athlete[]
  events      Event[]   @relation("EventToCategory")
}

model Event {
  id           String     @id @default(uuid())
  title        String
  description  String?
  location     String
  startDate    DateTime
  endDate      DateTime?
  type         EventType
  organizerId  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  lat          Float?
  lng          Float?
  organizer    User       @relation("organizer", fields: [organizerId], references: [id])
  results      Result[]
  categories   Category[] @relation("EventToCategory")
  participants User[]     @relation("participants")
}

model News {
  id        String   @id @default(uuid())
  title     String
  content   String
  authorId  String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageUrl  String?
  author    User     @relation("author", fields: [authorId], references: [id])
}

model Result {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  position  Int?
  score     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  COACH
  MEMBER
  VISITOR
}

enum EventType {
  COMPETITION
  TRAINING
  MEETING
  OTHER
  CAMP
}

enum UnitType {
  TIME
  DISTANCE
  POINTS
  COUNT
  WEIGHT
  OTHER
}

model DisciplineCategory {
  id                String       @id @default(uuid())
  name              String       @unique
  description       String?
  disciplines       Discipline[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model MeasurementUnit {
  id                String       @id @default(uuid())
  name              String       @unique
  symbol            String       @unique
  type              UnitType
  disciplines       Discipline[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Discipline {
  id                    String             @id @default(uuid())
  name                  String             @unique
  internationalSign     String             @unique
  description           String?
  categoryId            String?
  unitId                String?
  isTrackEvent          Boolean            @default(false)
  isFieldEvent          Boolean            @default(false)
  isRoadEvent           Boolean            @default(false)
  isCombinedEvent       Boolean            @default(false)
  isTeamEvent           Boolean            @default(false)
  olympicEvent          Boolean            @default(false)
  paralympicEvent       Boolean            @default(false)
  worldChampionshipEvent Boolean           @default(false)
  category              DisciplineCategory? @relation(fields: [categoryId], references: [id])
  unit                  MeasurementUnit?   @relation(fields: [unitId], references: [id])
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}
